NAME
    CGI::Application::Plugin::Header - Plugin for handling header props.

SYNOPSIS
      package MyApp;
      use parent 'CGI::Application';
      use CGI::Application::Plugin::Header;

      sub do_something {
          my $self = shift;

          my $header = $self->header; # => CGI::Header object

          # get header props.
          my $type = $self->header('type'); # => "text/plain"

          # set header props.
          $self->header( type => "text/html" );

          # compatible with the core methods of CGI::Application
          $self->header_props( type => "text/plain" );
          $self->header_add( type => "text/plain" );

          ...
      }

      ...

      use CGI;
      use CGI::Header;
      use MyApp;

      # you can define your CGI::Header object
      my $app = MyApp->new(
          PARAMS => {
              header => CGI::Header->new( query => CGI->new ),
          }
      );

DESCRIPTION
  METHODS
    This plugin exports the "header" method to your application on demand:

      use CGI::Application::Plugin::Header 'header';

    "header" can be used as follows, where $cgiapp denotes the instance of
    your application which inherits from CGI::Application:

    $header = $cgiapp->header
        Returns a CGI::Header object associated with $cgiapp.

    $value = $cgiapp->header( $prop )
        Returns the value of the specified property.

    $header = $cgiapp->header( $prop => $value )
    $header = $cgiapp->header( $p1 => $v1, $p2 => $v2, ... )
        Given key-value pairs of header props., merges them into the
        existing properties.

  HOOKS
    before_finalize_headers
        This plugin finalizes header props. just before sending headers, and
        so "header" can't be updated by the "cgiapp_postrun" hook. This hook
        allows you add a callback which is called just before finalizing
        header props. This hook receives a reference to the output from your
        run mode method, in addition to $cgiapp.

          __PACKAGE__->add_callback(
              before_finalize_headers => sub {
                  my ( $self, $body_ref ) = @_;
                  $self->header( 'Content-Length' => length $$body_ref );
              }
          );

AUTHOR
    Ryo Anazawa (anazawa@cpan.org)

LICENSE
    This module is free software; you can redistribute it and/or modify it
    under the same terms as Perl itself. See perlartistic.

